/**
 * OpenAPI Documentation - find.no
 * OpenApi documentation for find.no
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BookmarkRequestDTO from '../model/BookmarkRequestDTO';
import BookmarkResponseDTO from '../model/BookmarkResponseDTO';

/**
* BookmarkController service.
* @module api/BookmarkControllerApi
* @version 1.0
*/
export default class BookmarkControllerApi {

    /**
    * Constructs a new BookmarkControllerApi. 
    * @alias module:api/BookmarkControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create a bookmark for a listing
     * @param {module:model/BookmarkRequestDTO} bookmarkRequestDTO 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BookmarkResponseDTO} and HTTP response
     */
    createBookmarkWithHttpInfo(bookmarkRequestDTO) {
      let postBody = bookmarkRequestDTO;
      // verify the required parameter 'bookmarkRequestDTO' is set
      if (bookmarkRequestDTO === undefined || bookmarkRequestDTO === null) {
        throw new Error("Missing the required parameter 'bookmarkRequestDTO' when calling createBookmark");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = BookmarkResponseDTO;
      return this.apiClient.callApi(
        '/api/v1/bookmarks/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a bookmark for a listing
     * @param {module:model/BookmarkRequestDTO} bookmarkRequestDTO 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BookmarkResponseDTO}
     */
    createBookmark(bookmarkRequestDTO) {
      return this.createBookmarkWithHttpInfo(bookmarkRequestDTO)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a bookmark
     * @param {String} bookmarkId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteBookmarkWithHttpInfo(bookmarkId) {
      let postBody = null;
      // verify the required parameter 'bookmarkId' is set
      if (bookmarkId === undefined || bookmarkId === null) {
        throw new Error("Missing the required parameter 'bookmarkId' when calling deleteBookmark");
      }

      let pathParams = {
        'bookmarkId': bookmarkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/bookmarks/{bookmarkId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a bookmark
     * @param {String} bookmarkId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteBookmark(bookmarkId) {
      return this.deleteBookmarkWithHttpInfo(bookmarkId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Getting all bookmarks for a user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/BookmarkResponseDTO>} and HTTP response
     */
    getUserBookmarksWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [BookmarkResponseDTO];
      return this.apiClient.callApi(
        '/api/v1/bookmarks/my-bookmarks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Getting all bookmarks for a user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/BookmarkResponseDTO>}
     */
    getUserBookmarks() {
      return this.getUserBookmarksWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
