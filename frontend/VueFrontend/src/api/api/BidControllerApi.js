/**
 * OpenAPI Documentation - find.no
 * OpenApi documentation for find.no
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BidRequestDTO from '../model/BidRequestDTO';
import BidResponseDTO from '../model/BidResponseDTO';

/**
* BidController service.
* @module api/BidControllerApi
* @version 1.0
*/
export default class BidControllerApi {

    /**
    * Constructs a new BidControllerApi. 
    * @alias module:api/BidControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * @param {String} bidId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BidResponseDTO} and HTTP response
     */
    acceptBidWithHttpInfo(bidId) {
      let postBody = null;
      // verify the required parameter 'bidId' is set
      if (bidId === undefined || bidId === null) {
        throw new Error("Missing the required parameter 'bidId' when calling acceptBid");
      }

      let pathParams = {
        'bidId': bidId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = BidResponseDTO;
      return this.apiClient.callApi(
        '/api/v1/bids/{bidId}/accept', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} bidId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BidResponseDTO}
     */
    acceptBid(bidId) {
      return this.acceptBidWithHttpInfo(bidId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} bidId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BidResponseDTO} and HTTP response
     */
    cancelBidWithHttpInfo(bidId) {
      let postBody = null;
      // verify the required parameter 'bidId' is set
      if (bidId === undefined || bidId === null) {
        throw new Error("Missing the required parameter 'bidId' when calling cancelBid");
      }

      let pathParams = {
        'bidId': bidId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = BidResponseDTO;
      return this.apiClient.callApi(
        '/api/v1/bids/{bidId}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} bidId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BidResponseDTO}
     */
    cancelBid(bidId) {
      return this.cancelBidWithHttpInfo(bidId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/BidResponseDTO>} and HTTP response
     */
    getAcceptedBidsWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [BidResponseDTO];
      return this.apiClient.callApi(
        '/api/v1/bids/accepted', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/BidResponseDTO>}
     */
    getAcceptedBids() {
      return this.getAcceptedBidsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} chatId 
     * @param {module:model/BidRequestDTO} bidRequestDTO 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BidResponseDTO} and HTTP response
     */
    placeBidWithHttpInfo(chatId, bidRequestDTO) {
      let postBody = bidRequestDTO;
      // verify the required parameter 'chatId' is set
      if (chatId === undefined || chatId === null) {
        throw new Error("Missing the required parameter 'chatId' when calling placeBid");
      }
      // verify the required parameter 'bidRequestDTO' is set
      if (bidRequestDTO === undefined || bidRequestDTO === null) {
        throw new Error("Missing the required parameter 'bidRequestDTO' when calling placeBid");
      }

      let pathParams = {
        'chatId': chatId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = BidResponseDTO;
      return this.apiClient.callApi(
        '/api/v1/chat/{chatId}/bids', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} chatId 
     * @param {module:model/BidRequestDTO} bidRequestDTO 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BidResponseDTO}
     */
    placeBid(chatId, bidRequestDTO) {
      return this.placeBidWithHttpInfo(chatId, bidRequestDTO)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} bidId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BidResponseDTO} and HTTP response
     */
    rejectBidWithHttpInfo(bidId) {
      let postBody = null;
      // verify the required parameter 'bidId' is set
      if (bidId === undefined || bidId === null) {
        throw new Error("Missing the required parameter 'bidId' when calling rejectBid");
      }

      let pathParams = {
        'bidId': bidId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = BidResponseDTO;
      return this.apiClient.callApi(
        '/api/v1/bids/{bidId}/reject', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} bidId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BidResponseDTO}
     */
    rejectBid(bidId) {
      return this.rejectBidWithHttpInfo(bidId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
