/**
 * OpenAPI Documentation - find.no
 * OpenApi documentation for find.no
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AuthenticationRequestDTO from '../model/AuthenticationRequestDTO';
import TokenResponseDTO from '../model/TokenResponseDTO';
import UserRequestDTO from '../model/UserRequestDTO';

/**
* AuthenticationController service.
* @module api/AuthenticationControllerApi
* @version 1.0
*/
export default class AuthenticationControllerApi {

    /**
    * Constructs a new AuthenticationControllerApi. 
    * @alias module:api/AuthenticationControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * @param {module:model/AuthenticationRequestDTO} authenticationRequestDTO 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TokenResponseDTO} and HTTP response
     */
    authenticateWithHttpInfo(authenticationRequestDTO) {
      let postBody = authenticationRequestDTO;
      // verify the required parameter 'authenticationRequestDTO' is set
      if (authenticationRequestDTO === undefined || authenticationRequestDTO === null) {
        throw new Error("Missing the required parameter 'authenticationRequestDTO' when calling authenticate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = TokenResponseDTO;
      return this.apiClient.callApi(
        '/api/v1/auth/authenticate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/AuthenticationRequestDTO} authenticationRequestDTO 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TokenResponseDTO}
     */
    authenticate(authenticationRequestDTO) {
      return this.authenticateWithHttpInfo(authenticationRequestDTO)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UserRequestDTO} userRequestDTO 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TokenResponseDTO} and HTTP response
     */
    registerWithHttpInfo(userRequestDTO) {
      let postBody = userRequestDTO;
      // verify the required parameter 'userRequestDTO' is set
      if (userRequestDTO === undefined || userRequestDTO === null) {
        throw new Error("Missing the required parameter 'userRequestDTO' when calling register");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = TokenResponseDTO;
      return this.apiClient.callApi(
        '/api/v1/auth/register', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UserRequestDTO} userRequestDTO 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TokenResponseDTO}
     */
    register(userRequestDTO) {
      return this.registerWithHttpInfo(userRequestDTO)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UserRequestDTO} userRequestDTO 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TokenResponseDTO} and HTTP response
     */
    registerAdminWithHttpInfo(userRequestDTO) {
      let postBody = userRequestDTO;
      // verify the required parameter 'userRequestDTO' is set
      if (userRequestDTO === undefined || userRequestDTO === null) {
        throw new Error("Missing the required parameter 'userRequestDTO' when calling registerAdmin");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = TokenResponseDTO;
      return this.apiClient.callApi(
        '/api/v1/auth/register/admin', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UserRequestDTO} userRequestDTO 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TokenResponseDTO}
     */
    registerAdmin(userRequestDTO) {
      return this.registerAdminWithHttpInfo(userRequestDTO)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
