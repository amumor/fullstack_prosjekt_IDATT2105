/**
 * OpenAPI Documentation - find.no
 * OpenApi documentation for find.no
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ChatResponseDTO from '../model/ChatResponseDTO';
import MessageRequestDTO from '../model/MessageRequestDTO';
import MessageResponsetDTO from '../model/MessageResponsetDTO';

/**
* ChatController service.
* @module api/ChatControllerApi
* @version 1.0
*/
export default class ChatControllerApi {

    /**
    * Constructs a new ChatControllerApi. 
    * @alias module:api/ChatControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addMessageToChat operation.
     * @callback module:api/ChatControllerApi~addMessageToChatCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MessageResponsetDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} chatId 
     * @param {module:model/MessageRequestDTO} messageRequestDTO 
     * @param {module:api/ChatControllerApi~addMessageToChatCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MessageResponsetDTO}
     */
    addMessageToChat(chatId, messageRequestDTO, callback) {
      let postBody = messageRequestDTO;
      // verify the required parameter 'chatId' is set
      if (chatId === undefined || chatId === null) {
        throw new Error("Missing the required parameter 'chatId' when calling addMessageToChat");
      }
      // verify the required parameter 'messageRequestDTO' is set
      if (messageRequestDTO === undefined || messageRequestDTO === null) {
        throw new Error("Missing the required parameter 'messageRequestDTO' when calling addMessageToChat");
      }

      let pathParams = {
        'chatId': chatId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = MessageResponsetDTO;
      return this.apiClient.callApi(
        '/api/v1/chat/{chatId}/message', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createChatFromBuyer operation.
     * @callback module:api/ChatControllerApi~createChatFromBuyerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChatResponseDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} listingId 
     * @param {module:model/MessageRequestDTO} messageRequestDTO 
     * @param {module:api/ChatControllerApi~createChatFromBuyerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChatResponseDTO}
     */
    createChatFromBuyer(listingId, messageRequestDTO, callback) {
      let postBody = messageRequestDTO;
      // verify the required parameter 'listingId' is set
      if (listingId === undefined || listingId === null) {
        throw new Error("Missing the required parameter 'listingId' when calling createChatFromBuyer");
      }
      // verify the required parameter 'messageRequestDTO' is set
      if (messageRequestDTO === undefined || messageRequestDTO === null) {
        throw new Error("Missing the required parameter 'messageRequestDTO' when calling createChatFromBuyer");
      }

      let pathParams = {
        'listingId': listingId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ChatResponseDTO;
      return this.apiClient.callApi(
        '/api/v1/listing/{listingId}/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllChatsForListing operation.
     * @callback module:api/ChatControllerApi~getAllChatsForListingCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ChatResponseDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} listingId 
     * @param {module:api/ChatControllerApi~getAllChatsForListingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ChatResponseDTO>}
     */
    getAllChatsForListing(listingId, callback) {
      let postBody = null;
      // verify the required parameter 'listingId' is set
      if (listingId === undefined || listingId === null) {
        throw new Error("Missing the required parameter 'listingId' when calling getAllChatsForListing");
      }

      let pathParams = {
        'listingId': listingId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [ChatResponseDTO];
      return this.apiClient.callApi(
        '/api/v1/listing/{listingId}/chats', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllChatsForUser operation.
     * @callback module:api/ChatControllerApi~getAllChatsForUserCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ChatResponseDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/ChatControllerApi~getAllChatsForUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ChatResponseDTO>}
     */
    getAllChatsForUser(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [ChatResponseDTO];
      return this.apiClient.callApi(
        '/api/v1/user/my-chats', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChat operation.
     * @callback module:api/ChatControllerApi~getChatCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChatResponseDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} listingId 
     * @param {module:api/ChatControllerApi~getChatCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChatResponseDTO}
     */
    getChat(listingId, callback) {
      let postBody = null;
      // verify the required parameter 'listingId' is set
      if (listingId === undefined || listingId === null) {
        throw new Error("Missing the required parameter 'listingId' when calling getChat");
      }

      let pathParams = {
        'listingId': listingId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ChatResponseDTO;
      return this.apiClient.callApi(
        '/api/v1/listing/{listingId}/chat', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
