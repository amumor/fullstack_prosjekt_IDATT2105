/**
 * OpenAPI Documentation - find.no
 * OpenApi documentation for find.no
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CategoryCreationRequestDTO from '../model/CategoryCreationRequestDTO';
import CategoryListResponseDTO from '../model/CategoryListResponseDTO';
import CategoryResponseDTO from '../model/CategoryResponseDTO';

/**
* CategoryController service.
* @module api/CategoryControllerApi
* @version 1.0
*/
export default class CategoryControllerApi {

    /**
    * Constructs a new CategoryControllerApi. 
    * @alias module:api/CategoryControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the callDelete operation.
     * @callback module:api/CategoryControllerApi~callDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/CategoryControllerApi~callDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    callDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling callDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/category/delete/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the create1 operation.
     * @callback module:api/CategoryControllerApi~create1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CategoryResponseDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/CategoryCreationRequestDTO} categoryCreationRequestDTO 
     * @param {module:api/CategoryControllerApi~create1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CategoryResponseDTO}
     */
    create1(categoryCreationRequestDTO, callback) {
      let postBody = categoryCreationRequestDTO;
      // verify the required parameter 'categoryCreationRequestDTO' is set
      if (categoryCreationRequestDTO === undefined || categoryCreationRequestDTO === null) {
        throw new Error("Missing the required parameter 'categoryCreationRequestDTO' when calling create1");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = CategoryResponseDTO;
      return this.apiClient.callApi(
        '/api/v1/category/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAll operation.
     * @callback module:api/CategoryControllerApi~getAllCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CategoryListResponseDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/CategoryControllerApi~getAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CategoryListResponseDTO}
     */
    getAll(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = CategoryListResponseDTO;
      return this.apiClient.callApi(
        '/api/v1/category/all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getById1 operation.
     * @callback module:api/CategoryControllerApi~getById1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CategoryResponseDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/CategoryControllerApi~getById1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CategoryResponseDTO}
     */
    getById1(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getById1");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = CategoryResponseDTO;
      return this.apiClient.callApi(
        '/api/v1/category/id/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getByName operation.
     * @callback module:api/CategoryControllerApi~getByNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CategoryResponseDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} name 
     * @param {module:api/CategoryControllerApi~getByNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CategoryResponseDTO}
     */
    getByName(name, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getByName");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = CategoryResponseDTO;
      return this.apiClient.callApi(
        '/api/v1/category/name/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
