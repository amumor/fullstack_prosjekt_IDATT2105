/**
 * OpenAPI Documentation - find.no
 * OpenApi documentation for find.no
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BidResponseDTO from './BidResponseDTO';
import MessageResponseDTO from './MessageResponseDTO';

/**
 * The ChatResponseDTO model module.
 * @module model/ChatResponseDTO
 * @version 1.0
 */
class ChatResponseDTO {
    /**
     * Constructs a new <code>ChatResponseDTO</code>.
     * @alias module:model/ChatResponseDTO
     */
    constructor() { 
        
        ChatResponseDTO.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ChatResponseDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChatResponseDTO} obj Optional instance to populate.
     * @return {module:model/ChatResponseDTO} The populated <code>ChatResponseDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChatResponseDTO();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('listingId')) {
                obj['listingId'] = ApiClient.convertToType(data['listingId'], 'String');
            }
            if (data.hasOwnProperty('buyerFirstName')) {
                obj['buyerFirstName'] = ApiClient.convertToType(data['buyerFirstName'], 'String');
            }
            if (data.hasOwnProperty('buyerLastName')) {
                obj['buyerLastName'] = ApiClient.convertToType(data['buyerLastName'], 'String');
            }
            if (data.hasOwnProperty('sellerFirstName')) {
                obj['sellerFirstName'] = ApiClient.convertToType(data['sellerFirstName'], 'String');
            }
            if (data.hasOwnProperty('sellerLastName')) {
                obj['sellerLastName'] = ApiClient.convertToType(data['sellerLastName'], 'String');
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('messages')) {
                obj['messages'] = ApiClient.convertToType(data['messages'], [MessageResponseDTO]);
            }
            if (data.hasOwnProperty('bids')) {
                obj['bids'] = ApiClient.convertToType(data['bids'], [BidResponseDTO]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChatResponseDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChatResponseDTO</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['listingId'] && !(typeof data['listingId'] === 'string' || data['listingId'] instanceof String)) {
            throw new Error("Expected the field `listingId` to be a primitive type in the JSON string but got " + data['listingId']);
        }
        // ensure the json data is a string
        if (data['buyerFirstName'] && !(typeof data['buyerFirstName'] === 'string' || data['buyerFirstName'] instanceof String)) {
            throw new Error("Expected the field `buyerFirstName` to be a primitive type in the JSON string but got " + data['buyerFirstName']);
        }
        // ensure the json data is a string
        if (data['buyerLastName'] && !(typeof data['buyerLastName'] === 'string' || data['buyerLastName'] instanceof String)) {
            throw new Error("Expected the field `buyerLastName` to be a primitive type in the JSON string but got " + data['buyerLastName']);
        }
        // ensure the json data is a string
        if (data['sellerFirstName'] && !(typeof data['sellerFirstName'] === 'string' || data['sellerFirstName'] instanceof String)) {
            throw new Error("Expected the field `sellerFirstName` to be a primitive type in the JSON string but got " + data['sellerFirstName']);
        }
        // ensure the json data is a string
        if (data['sellerLastName'] && !(typeof data['sellerLastName'] === 'string' || data['sellerLastName'] instanceof String)) {
            throw new Error("Expected the field `sellerLastName` to be a primitive type in the JSON string but got " + data['sellerLastName']);
        }
        if (data['messages']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['messages'])) {
                throw new Error("Expected the field `messages` to be an array in the JSON data but got " + data['messages']);
            }
            // validate the optional field `messages` (array)
            for (const item of data['messages']) {
                MessageResponseDTO.validateJSON(item);
            };
        }
        if (data['bids']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['bids'])) {
                throw new Error("Expected the field `bids` to be an array in the JSON data but got " + data['bids']);
            }
            // validate the optional field `bids` (array)
            for (const item of data['bids']) {
                BidResponseDTO.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {String} id
 */
ChatResponseDTO.prototype['id'] = undefined;

/**
 * @member {String} listingId
 */
ChatResponseDTO.prototype['listingId'] = undefined;

/**
 * @member {String} buyerFirstName
 */
ChatResponseDTO.prototype['buyerFirstName'] = undefined;

/**
 * @member {String} buyerLastName
 */
ChatResponseDTO.prototype['buyerLastName'] = undefined;

/**
 * @member {String} sellerFirstName
 */
ChatResponseDTO.prototype['sellerFirstName'] = undefined;

/**
 * @member {String} sellerLastName
 */
ChatResponseDTO.prototype['sellerLastName'] = undefined;

/**
 * @member {Date} createdAt
 */
ChatResponseDTO.prototype['createdAt'] = undefined;

/**
 * @member {Array.<module:model/MessageResponseDTO>} messages
 */
ChatResponseDTO.prototype['messages'] = undefined;

/**
 * @member {Array.<module:model/BidResponseDTO>} bids
 */
ChatResponseDTO.prototype['bids'] = undefined;






export default ChatResponseDTO;

