/**
 * OpenAPI Documentation - find.no
 * OpenApi documentation for find.no
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ListingCreationRequestDTO from './ListingCreationRequestDTO';

/**
 * The UpdateListingRequest model module.
 * @module model/UpdateListingRequest
 * @version 1.0
 */
class UpdateListingRequest {
    /**
     * Constructs a new <code>UpdateListingRequest</code>.
     * @alias module:model/UpdateListingRequest
     * @param listing {module:model/ListingCreationRequestDTO} 
     */
    constructor(listing) { 
        
        UpdateListingRequest.initialize(this, listing);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, listing) { 
        obj['listing'] = listing;
    }

    /**
     * Constructs a <code>UpdateListingRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateListingRequest} obj Optional instance to populate.
     * @return {module:model/UpdateListingRequest} The populated <code>UpdateListingRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateListingRequest();

            if (data.hasOwnProperty('listing')) {
                obj['listing'] = ListingCreationRequestDTO.constructFromObject(data['listing']);
            }
            if (data.hasOwnProperty('images')) {
                obj['images'] = ApiClient.convertToType(data['images'], [File]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateListingRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateListingRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UpdateListingRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `listing`
        if (data['listing']) { // data not null
          ListingCreationRequestDTO.validateJSON(data['listing']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['images'])) {
            throw new Error("Expected the field `images` to be an array in the JSON data but got " + data['images']);
        }

        return true;
    }


}

UpdateListingRequest.RequiredProperties = ["listing"];

/**
 * @member {module:model/ListingCreationRequestDTO} listing
 */
UpdateListingRequest.prototype['listing'] = undefined;

/**
 * @member {Array.<File>} images
 */
UpdateListingRequest.prototype['images'] = undefined;






export default UpdateListingRequest;

